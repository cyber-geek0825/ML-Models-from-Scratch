{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"},{"sourceId":34377,"databundleVersionId":3220602,"sourceType":"competition"},{"sourceId":73278,"databundleVersionId":8121328,"sourceType":"competition"},{"sourceId":8267818,"sourceType":"datasetVersion","datasetId":9}],"dockerImageVersionId":30513,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/cybersimar08/ml-models-from-scratch?scriptVersionId=174943366\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"<h1 style=\"border:orange; border-width:3px; border-style:solid;padding:20px;text-align:center;border-radius:50px\"> üß™ ML Models from Scratch üß¨</h1>  ","metadata":{}},{"cell_type":"markdown","source":"# üìî Importing Libraries","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom sklearn.datasets import load_breast_cancer,make_regression,load_iris,make_classification\nfrom sklearn.model_selection import train_test_split\nfrom collections import Counter","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-30T20:07:33.68363Z","iopub.execute_input":"2024-04-30T20:07:33.68438Z","iopub.status.idle":"2024-04-30T20:07:33.691554Z","shell.execute_reply.started":"2024-04-30T20:07:33.684331Z","shell.execute_reply":"2024-04-30T20:07:33.690267Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# üîë Functions","metadata":{}},{"cell_type":"code","source":"def sigmoid(z):\n    ''' function to find sigmoid '''\n    z=z.astype(np.float128)\n    return 1/(1+np.exp(-z))\n\ndef mse(y,y_pred):\n    ''' Mean Squared Error loss function '''\n    return np.average((y - y_pred) ** 2, axis=0)\n\ndef accuracy(y, y_pred):\n    ''' function to calculate accuracy '''\n    accuracy = np.mean(y_pred == y)\n    return accuracy\n\ndef distance(x1,x2):\n    return np.sqrt(np.sum((x1-x2)**2))","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:33.694131Z","iopub.execute_input":"2024-04-30T20:07:33.694567Z","iopub.status.idle":"2024-04-30T20:07:33.708676Z","shell.execute_reply.started":"2024-04-30T20:07:33.694527Z","shell.execute_reply":"2024-04-30T20:07:33.707258Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<h1 style=\"border:orange; border-width:3px; border-style:solid;padding:20px;text-align:center;border-radius:50px\"> üìè Linear Regression</h1>  ","metadata":{}},{"cell_type":"markdown","source":"**For information related to formulas refer :- https://www.youtube.com/watch?v=VmbA0pi2cRQ&ab_channel=NeuralNine**","metadata":{}},{"cell_type":"code","source":"class LinearRegression:\n    def __init__(self,alpha=0.001,iters=10000):\n        self.iters=iters\n        self.alpha=alpha\n        self.w=None\n        self.b=None\n        \n    def fit(self,x,y):\n        samples,features=x.shape\n        self.w=np.zeros(features)\n        self.b=0\n        for _ in range(self.iters):\n            yhat=np.dot(x,self.w)+self.b\n            dw=(2/samples)*(np.dot(x.T,(yhat-y)))\n            db=(2/samples)*(np.sum(yhat-y))\n            self.w=self.w-self.alpha*dw\n            self.b=self.b-self.alpha*db\n            \n    def predict(self,x):\n        y_pred=np.dot(x,self.w)+self.b\n        return y_pred","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:33.710626Z","iopub.execute_input":"2024-04-30T20:07:33.711346Z","iopub.status.idle":"2024-04-30T20:07:33.724201Z","shell.execute_reply.started":"2024-04-30T20:07:33.711304Z","shell.execute_reply":"2024-04-30T20:07:33.722708Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# üìù Importing Data","metadata":{}},{"cell_type":"code","source":"x,y = make_regression(n_samples=100, n_features=1, n_targets=1, noise=50, random_state=4)\nplt.scatter(x,y)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:33.726179Z","iopub.execute_input":"2024-04-30T20:07:33.726994Z","iopub.status.idle":"2024-04-30T20:07:34.023615Z","shell.execute_reply.started":"2024-04-30T20:07:33.726953Z","shell.execute_reply":"2024-04-30T20:07:34.022443Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1234)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:34.026124Z","iopub.execute_input":"2024-04-30T20:07:34.026446Z","iopub.status.idle":"2024-04-30T20:07:34.033144Z","shell.execute_reply.started":"2024-04-30T20:07:34.026419Z","shell.execute_reply":"2024-04-30T20:07:34.03189Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# üî¨ Applying Linear Regression on Dataset","metadata":{}},{"cell_type":"code","source":"linr=LinearRegression()\nlinr.fit(x_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:34.034808Z","iopub.execute_input":"2024-04-30T20:07:34.035193Z","iopub.status.idle":"2024-04-30T20:07:34.314051Z","shell.execute_reply.started":"2024-04-30T20:07:34.035152Z","shell.execute_reply":"2024-04-30T20:07:34.312894Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred=linr.predict(x_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:34.31706Z","iopub.execute_input":"2024-04-30T20:07:34.317691Z","iopub.status.idle":"2024-04-30T20:07:34.325157Z","shell.execute_reply.started":"2024-04-30T20:07:34.317647Z","shell.execute_reply":"2024-04-30T20:07:34.323845Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:34.326712Z","iopub.execute_input":"2024-04-30T20:07:34.329915Z","iopub.status.idle":"2024-04-30T20:07:34.33813Z","shell.execute_reply.started":"2024-04-30T20:07:34.329846Z","shell.execute_reply":"2024-04-30T20:07:34.336381Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.scatter(x,y,color='red')\nplt.plot(x,linr.predict(x),color='blue')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:34.339734Z","iopub.execute_input":"2024-04-30T20:07:34.340175Z","iopub.status.idle":"2024-04-30T20:07:34.617697Z","shell.execute_reply.started":"2024-04-30T20:07:34.340135Z","shell.execute_reply":"2024-04-30T20:07:34.616607Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<h1 style=\"border:orange; border-width:3px; border-style:solid;padding:20px;text-align:center;border-radius:50px\"> ‚ö° Logistic Regression</h1>  ","metadata":{}},{"cell_type":"markdown","source":"**For further information feel free to refer :- https://www.youtube.com/watch?v=YYEJ_GUguHw&ab_channel=AssemblyAI**","metadata":{}},{"cell_type":"code","source":"class LogisticRegression:\n    def __init__(self,alpha=0.0001,iters=1000):\n        self.iters=iters\n        self.alpha=alpha\n        self.w=None\n        self.b=None\n        \n    def fit(self,x,y):\n        samples,features=x.shape\n        self.w=np.zeros(features)\n        self.b=0\n        for _ in range(self.iters):\n            z=np.dot(x,self.w)+self.b\n            g=sigmoid(z)\n            dw=(2/samples)*(np.dot(x.T,(g-y)))\n            db=(2/samples)*(np.sum(g-y))\n            self.w=self.w-self.alpha*dw\n            self.b=self.b-self.alpha*db\n            \n    def predict(self,x):\n        linear_pred=np.dot(x,self.w)+self.b\n        pred_probab=sigmoid(linear_pred)\n        y_pred=[0 if y<=0.5 else 1 for y in pred_probab]\n        return y_pred\n    \n    def predict_proba(self,x):\n        linear_pred=np.dot(x,self.w)+self.b\n        return sigmoid(linear_pred)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:34.619144Z","iopub.execute_input":"2024-04-30T20:07:34.619615Z","iopub.status.idle":"2024-04-30T20:07:34.631082Z","shell.execute_reply.started":"2024-04-30T20:07:34.619585Z","shell.execute_reply":"2024-04-30T20:07:34.629752Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# üìù Importing Data","metadata":{}},{"cell_type":"code","source":"df = load_breast_cancer()     \nx,y=df.data,df.target","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:34.633177Z","iopub.execute_input":"2024-04-30T20:07:34.633523Z","iopub.status.idle":"2024-04-30T20:07:34.659352Z","shell.execute_reply.started":"2024-04-30T20:07:34.633496Z","shell.execute_reply":"2024-04-30T20:07:34.658371Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=1234)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:34.660832Z","iopub.execute_input":"2024-04-30T20:07:34.661916Z","iopub.status.idle":"2024-04-30T20:07:34.669244Z","shell.execute_reply.started":"2024-04-30T20:07:34.661855Z","shell.execute_reply":"2024-04-30T20:07:34.668191Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# üî¨ Applying Logistic Regression on Dataset","metadata":{}},{"cell_type":"code","source":"logr=LogisticRegression()\nlogr.fit(x_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:34.675202Z","iopub.execute_input":"2024-04-30T20:07:34.675569Z","iopub.status.idle":"2024-04-30T20:07:34.937499Z","shell.execute_reply.started":"2024-04-30T20:07:34.675539Z","shell.execute_reply":"2024-04-30T20:07:34.936274Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred=logr.predict(x_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:34.939293Z","iopub.execute_input":"2024-04-30T20:07:34.939656Z","iopub.status.idle":"2024-04-30T20:07:34.944548Z","shell.execute_reply.started":"2024-04-30T20:07:34.939625Z","shell.execute_reply":"2024-04-30T20:07:34.943316Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:34.946213Z","iopub.execute_input":"2024-04-30T20:07:34.94663Z","iopub.status.idle":"2024-04-30T20:07:34.956776Z","shell.execute_reply.started":"2024-04-30T20:07:34.946589Z","shell.execute_reply":"2024-04-30T20:07:34.955644Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<h1 style=\"border:orange; border-width:3px; border-style:solid;padding:20px;text-align:center;border-radius:50px\"> üî™ KNNClassification</h1>  ","metadata":{}},{"cell_type":"code","source":"class KNNClassification:\n    def __init__(self,k=3):\n        self.k=k\n        \n    def fit(self,x,y):\n        self.x=x\n        self.y=y\n        \n    def predict(self,x_test):\n        prediction=[self.help_func(j) for j in x_test]\n        return prediction\n    \n    '''Helper function'''\n    def help_func(self,j):\n        '''Calculating distance from other points'''\n        distances=[distance(j,i) for i in self.x]\n        \n        '''Getting the closest k'''\n        k_indices=np.argsort(distances)[:self.k]\n        k_nearest=[self.y[i] for i in k_indices]\n        \n        '''Calculating majority vote'''\n        major_votes=Counter(list(k_nearest)).most_common() # this returns the list of counts of each instance\n        \n        # the major_votes array would look like this [(instance1, count_of_occurance),(instance2,count_of_occurance)]\n        # this is in descending order of occurance so we will take the first element of the first tupple of the list\n        return major_votes[0][0]","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:34.958423Z","iopub.execute_input":"2024-04-30T20:07:34.958992Z","iopub.status.idle":"2024-04-30T20:07:34.968818Z","shell.execute_reply.started":"2024-04-30T20:07:34.958952Z","shell.execute_reply":"2024-04-30T20:07:34.967696Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# üìù Importing Data","metadata":{}},{"cell_type":"code","source":"df = load_iris()     \nx,y=df.data,df.target","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:34.970522Z","iopub.execute_input":"2024-04-30T20:07:34.971098Z","iopub.status.idle":"2024-04-30T20:07:34.98411Z","shell.execute_reply.started":"2024-04-30T20:07:34.971059Z","shell.execute_reply":"2024-04-30T20:07:34.98307Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=1234)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:34.98721Z","iopub.execute_input":"2024-04-30T20:07:34.987661Z","iopub.status.idle":"2024-04-30T20:07:34.996132Z","shell.execute_reply.started":"2024-04-30T20:07:34.987621Z","shell.execute_reply":"2024-04-30T20:07:34.994848Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# üî¨ Applying KNN Classification on Dataset","metadata":{}},{"cell_type":"code","source":"knnc=KNNClassification()\nknnc.fit(x_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:34.997368Z","iopub.execute_input":"2024-04-30T20:07:34.997798Z","iopub.status.idle":"2024-04-30T20:07:35.005887Z","shell.execute_reply.started":"2024-04-30T20:07:34.997768Z","shell.execute_reply":"2024-04-30T20:07:35.004735Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred=knnc.predict(x_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:35.007134Z","iopub.execute_input":"2024-04-30T20:07:35.008213Z","iopub.status.idle":"2024-04-30T20:07:35.070349Z","shell.execute_reply.started":"2024-04-30T20:07:35.008171Z","shell.execute_reply":"2024-04-30T20:07:35.069109Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:35.071669Z","iopub.execute_input":"2024-04-30T20:07:35.072133Z","iopub.status.idle":"2024-04-30T20:07:35.078216Z","shell.execute_reply.started":"2024-04-30T20:07:35.072103Z","shell.execute_reply":"2024-04-30T20:07:35.077129Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<h1 style=\"border:orange; border-width:3px; border-style:solid;padding:20px;text-align:center;border-radius:50px\"> üó° KNNRegression</h1>  ","metadata":{}},{"cell_type":"code","source":"class KNNRegression:\n    def __init__(self,k=3):\n        self.k=k\n        \n    def fit(self,x,y):\n        self.x=x\n        self.y=y\n        \n    def predict(self,x_test):\n        prediction=[self.help_func(j) for j in x_test]\n        return prediction\n    \n    '''Helper function'''\n    def help_func(self,j):\n        '''Calculating distance from other points'''\n        distances=[distance(j,i) for i in self.x]\n        \n        '''Getting the closest k'''\n        k_indices=np.argsort(distances)[:self.k]\n        k_nearest=[self.y[i] for i in k_indices]\n        \n        '''Calculating majority vote'''\n        average=np.mean(k_nearest)\n        \n        return average","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:35.079923Z","iopub.execute_input":"2024-04-30T20:07:35.081687Z","iopub.status.idle":"2024-04-30T20:07:35.091599Z","shell.execute_reply.started":"2024-04-30T20:07:35.081655Z","shell.execute_reply":"2024-04-30T20:07:35.090142Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# üìù Importing Data","metadata":{}},{"cell_type":"code","source":"x,y = make_regression(n_samples=100, n_features=1, n_targets=1, noise=50, random_state=4)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:35.092988Z","iopub.execute_input":"2024-04-30T20:07:35.093843Z","iopub.status.idle":"2024-04-30T20:07:35.104533Z","shell.execute_reply.started":"2024-04-30T20:07:35.093811Z","shell.execute_reply":"2024-04-30T20:07:35.10341Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1234)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:35.10591Z","iopub.execute_input":"2024-04-30T20:07:35.106743Z","iopub.status.idle":"2024-04-30T20:07:35.114946Z","shell.execute_reply.started":"2024-04-30T20:07:35.106709Z","shell.execute_reply":"2024-04-30T20:07:35.114069Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# üî¨ Applying KNN Regression on Dataset","metadata":{}},{"cell_type":"code","source":"knnr=KNNRegression()\nknnr.fit(x_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:35.115804Z","iopub.execute_input":"2024-04-30T20:07:35.11616Z","iopub.status.idle":"2024-04-30T20:07:35.130087Z","shell.execute_reply.started":"2024-04-30T20:07:35.116132Z","shell.execute_reply":"2024-04-30T20:07:35.128753Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred=knnr.predict(x_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:35.131024Z","iopub.execute_input":"2024-04-30T20:07:35.131397Z","iopub.status.idle":"2024-04-30T20:07:35.161368Z","shell.execute_reply.started":"2024-04-30T20:07:35.131368Z","shell.execute_reply":"2024-04-30T20:07:35.160353Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:07:35.16305Z","iopub.execute_input":"2024-04-30T20:07:35.163392Z","iopub.status.idle":"2024-04-30T20:07:35.174969Z","shell.execute_reply.started":"2024-04-30T20:07:35.163364Z","shell.execute_reply":"2024-04-30T20:07:35.173738Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<h1 style=\"border:orange; border-width:3px; border-style:solid;padding:20px;text-align:center;border-radius:50px\"> üå¥ Decision Tree Classification</h1>  ","metadata":{}},{"cell_type":"markdown","source":"![image.png](attachment:89076d78-8a16-4f38-ba48-65b37797b366.png)\n![image.png](attachment:ef7cccf8-e143-443d-bf8a-f2b57c38093d.png)","metadata":{},"attachments":{"89076d78-8a16-4f38-ba48-65b37797b366.png":{"image/png":""},"ef7cccf8-e143-443d-bf8a-f2b57c38093d.png":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAcIAAABOCAYAAACzHRZSAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAAFN/SURBVHhe7Z0HgF1F9f/Pe2/3bU/vpEFIAkhLAqEkFKlSbEgJ6E8BFf2poKiA+AMRFBWxYsPf35+KDRugAgLSe+81EEgI6WU3ZbPtlf2fz8w9b+++vLf7drOber/J7L13+pw5c86cmbn3xY6cnWmXCBEiRIgQYQdFPLhGiLD1I7YFXIQIxVCIXyK36W4LIFKE2y22Au7qa7B2sbldhB0c28nY2ZawBUgeLY1uj3CMlN+t6um8CAyH5T9HiBDBITeObOyE4QIjbFb0n5yKFOF2hUCpxehS69bwgGVARwN486KU4dWbPomGbb8gGEIOuXGUP264702fRdg0WH/0PSJFuL2g07jMZxi7jwbw9o2ob3uF3FAJ0089I0W4lcH6pAi6COoOkSLcHpBjDrvmDdxceFYd9zaQuQ8/R+hb9ISm1keloEi+rs+3rX6MxUurb3u2J/TpCYz/QbguXZXXvzSObWL27V1UfVPz3pxo76oh3aJnaSNFuD3AKTqUHFBOby8L7vMQy+gfi8c5qVCafh7cOyTaoXEpdNX+i1lflICS841gMD1aot7dotjaFOEm6SPFliizQ7aVhkgRbg9wQhQHx6mQbE/kmM8YygsCVYSFBG43lkQv+Lhb7BhM1wNF2KOBu3G+JuDDQmfThUnvQB0ouzcCMIzukoebVyiuhcP7+eE5A1OvcciZAwE+trXBLJNsezagM3/yc+yMXPaaNqaZuBSbSpCtFNbfWwLhhQL6pqMukSLc8ZBThHRlXAd2ubvVceuu5foIg2T1GcYpxrRbipkj9BHoP/pXL7FOwn3zwvFdHwC1gSuGoLlF4xEWvho6Ce7g3lc5o8KUACaSPsd0WqQs4ZUlNA28i4K8rP3uXp2lyZXZA3RXXj56UkZP8+4KpZbb4/YoLUnTXf70jZNv2tsJeN+2g0qtV6QItwPklka5MgMtUwZKSGurzmD1X0WFH8yZYIDmwwYuzNSbwRqhOHqqFHqqwMJCFxlj/celVKFTKF4xPugr/iilbkTpKlq4KsXiheN0urcHTZjJqraLZ1SAogATGqYKUaVpJhOXtrZ2HUExqdQxpMEuj0I0MGFNf3B1dedZnVktdt0Wlme3BkCuHK2gZXBryNGcAL3PtqclllBFmLBERLD7rhEpwu0Brq/pRvYAM8oYaXV+dptOpXRAE6VMB3KZMo+bLpEgDyhQf81HaaxUOiKG63vEtfNiAWWNvlz7uu/6Ap4Hu4fVvZQ2dMVT0IUlSv8P+DHQLq0qPFulPFnplJ7EajQjnURKm8ZvkrKymKTa2qQ8kXDjqF1pnHW1Cdds45JdDPWmR2IqiGNqTrq+8AMsd+2AS+FvIzg5ZMvRjlZ676jDrRKWJ4Lh+XY1AzPZNpVtOmFJJNUqRMaVa+RAzkWKcAeDswqBzm5jG5RRGmTmAZPk4IP1UXmCZQMbfxuNw27Qw+glIWK6/gF91VPakqYv+riv+7RTnbrI3GQdUYq2QwMJd3E0EoKUlZK160TuuL1RXntljSSTo1W4qkUoKUmll8qYMXE58cSxMnCgy8EhX1paXuExxdKcF9Qb16dQ/AgekBbnSMNNAOjlriFnhEXslZWJzJ0r8p873pGG+nKpqhri+tEfKgsSd4NIEW4XsFHFLLdNEmUNOsBfkI+etZ989nODg7AIESLkA+l38YUr5fFHWiVZPtYJ3Wx7myrC12XXKY3y058fKDXVQeQIWy0eeVTk2998QRpWjZKqyuGhLYlIEe5AQBGaMmyXRPkqWdf4tJx02lj5zLl7qkXYIulUk5QldAosSRenVAYBLveIS7ZC0Ck6+VHzYlO7x7hnk6CV6JN88uDa1kXG+W0PPzve9bfOv53FzbJWSaXapDI5XFqbRL5x2VJ59MF2FaBjXByvCOfKpKnL5Iorj5YRo9g/bFYlmZBshvFDjr4UlufyYct6dgUs4QG3TNrTjeMSYUvO/ZV/KaAOPSk/vEzu+wfq+qXQMP2AWxJ1dxnl+bTSMiUtzWkZWDtcHn1I5Korn5P6VeOkpmqopvUpvOsekSLcLhAe7noXXyYt6WflQ3MGy7nn7isJqZe0rNdrucaq1Bh0eTFm3XhgR9haQT9af3UIlB0dYYEW5mb8nSKUJklJm04Jd5XG5kq59OJ5qgirpLZmJ5cg287S6Csyabe35OofHi1DBq7TsaMaU8dPx0TSUNp48Ttbvnz+uf3DIG2sj/qOvEFf5VcKKNN2Xn2Lel621dv3j+Xjr2FwbMmXlFaXUtcmrfq3SqbKg6oIv3XFY1K/clcZUDcsUISgNKUcKcLtAp5tDO2xFdLS9ryc+uGx8tlzd1fmaZZUtlnK4xXKShVq3SlLaXT/XlRcr12zQGd2jLA1YmsYxP3JJz1uH5XJT6R+XujqeGhPS2VsuKxuEPn6pfPl+adrpLJyRPCKUdotjU6aski+/6NjZMDAVknEmnTslGkGFZJxxz995uEiuOdLOYwno0X4YIyzHjVSJpNx/vHOLzBuMrJaefLd+DBO/8EdQgrkR2/Lzrf8DPl5sfLhOtEdCkwrKdsk3R7Xfhwod90l8r2rnpCm9VOkIjlIaaF94OJHinAHgjGIRyy+SppaX5BTzxgnnz1vshugqWyTV4S8bK8eHbEjROhD9Adj9ZGE4lCNs15irZLOpqQiXicNa1GE78gzT3DIYlSgCDOqCN+QSZOXyNU/OEKGDkGJtWgOqgizOL11eXWums9fgwrQwLz6c4sBfdILPbTNwOjr24nST6kijEkylpR77hG5+jtPyYb1u0qybJBTrj1RhNF6ynYIzwDM1Jg5MQj9axXeKQh22jByketjl1MPfegKldMbh1B0H5/IaK4sr+mjjgV3DL+TVcI9aUyI+jTOubHDc+C4D5x/uULv27n6Ha18V7BefeRi8cL+243LgX5QqzrXL9qHqsmQe3yT1om/HiJShFsb3EDLcz1E/pJChAgRSoQbOiZ0w8IXaKD+D1TaRg4gr/07nT4rc4b8NNujY2k4/Iw8MkdYfni+21R0mtOUiEgRbk1wsx4cM53QtdNsqHvkr7kzEG1wRugZoKW5fITDCoVH2AbRqRv9iMHLe/vDGu1xVYRssrsXBTu7Qr+mQRpGso3qsGIo1VkdtnYXrquTOcFzRsdHKpOWTBZrrvv2lAKO6YRBWb1FpAi3Oljn5l170Md2+IW/DD7QQ10aQREpt+0H4Z7kwIwJTT6bxn0hIWqvPOT2ptw/u/cuH+aXfw2jO4uokOsp8idpYdefoG1l8bgkAnryF4dSTCTKpKyMk7edUaiOuM2JSBFuEwiGQ4nazGZhLJwHKSNE2GFhY6DQOOArMKYETRdyktpgfiqa/U0XsDLM8rNrOGUhhdvX6E6J9KeyQeG1pVOu7ViBS5Ytk6aWFtnQtEFWrlopGbUKi008tiQiRbjNoHSmtSPcETpjaxt8EbYcjBfcIYsCy5nAFAUf3QalKMNSkM+HCOG+EMRbWsHY9ktGLWna8+BDD8oXv/hFWblypdz0j3/I967+njSsWePC+kMJbwr6gv4FADnCrvNtycjLojjyIoXThbx3NGzPJGAg8T4W4Goz3LAzcJ9Op6W1tdXdIyzsuimCw9Jvaj4RNi/CCq1Yt5X6YfBSAX+wXGi5Gn9ytdoQhsXk3gfUe8LwwxmPkYfLRx3hPn7GObAludDKLg+WP+e/NV/WrVsnVdVV8sorr0ha6zp86DBvLQaWoWuPzkZy9dfn8LUr2ASlL7AJvR2qBLcs2+WcNjXsgFtodxELuCKwNC5dEbgsrKyApcLpXNpiLoRCwbiNUCww73mjtBt5bBZsmVL7D37w+xeSy8r40ry/8nJyviMMx315eblUVFS4e2BXE0gRdiwoZ/hrIAHDis+EcCHe6C27hAWtKbB0OuXKYvWG5cS0KkDC2GOjBi5eUCDpid/c1upcSu/hYfbcyhLwf8IpUKyxnqAv+d9yWl2/Wua+8YY8+ugjTvk9/9xz6p6X+tWrZf6C+a7tgPYA2pqkHdoe2pXWSav1weZCL1+ot0pqUqd8ws4QvqcbcZrOeRdqZBA/lLV/wPGgrlNYgE7lawT3xfEw2xksURAvh8DfeVkcQziewgUXSOtg/vl5GLoKJ0z9c20pBo3nFHs+8Ovwj5WtlsaW5+Q0Xqg/d4pSI6ODrFlnXkktQh1xuixn6wSDg0GC4nvwwQflz3/+s6RSKafkbEDnD+ywUOMeq3CXXXaRT33qUzJs2LBcfhYnjGJ5Rdi2QC8G3KGdyFGZDe6pXAbouOCj28vk8YfjUl09QvmBfs5Ka+oNmbDzfPnhNe+RIUM48t+o/knNgu/1gs680R3gJYR8VdKnJzXchPID8BaumOTCFQoDpvooAyWDUiSvfP4thr7gayw7ToWWq1J+/sUX5cfX/FhuvvlmGaYW4M477+wswmHDhspZZ58tJxx/gtxw4w1y//33y2c+8xk55uhj5PIrLpcXnn9BrrrqKpmy667S1tYmyWSyUxtyr62060Q4zvJrWlLqkYxVyX338UL9M7KuYWepSA526Xy7SpsY9E4RKjMxG2lXodzp+6pd5RTQmpc+/UdZLXIQ4AR8KR1CHE2L0uiUJsjP+bubwOXBWahBXAeN4/IJ7jshHA/os1NWhiCt8zP/cH4B8sOLIhyvEArk7YBfh78pwlNP30k+d95unRShZJP+gIDGYwaJoy+7GwzGkDbA+mLw9BSUmQ4U14s62E466SSZN29eECpSWVkpiUTCWYwG/FCWGzZ44QcmTZok//rXv2SPPfbIKVKQLzjyn8NtNjoA6kS5xWgSjpsP8/fjqXCcUkF6ywdXrD6bgq7asrWC2voa618di5msKrV4zClCpMFXLlihijCminC48gNt9Ipw3MS35Mc/OS6kCJVP2vlWL+iaBrbUF1ZKKAtw2x13yNKlS+SDHzxJBga/8bRu/Tp5Ti2nNWvWqIVHmribtA0fPlz23HNPqa2t0fDnZfnyZS4vwoYMGSpvzX9Lx3NCPvzhM5xVZTAFWwr6ik8sHxT20uXL5bTTTpNTTztVDpl9iJx//hfkk588R97//vdLc3OzvPDiC3LJ//yPo8/73vc+N4733mdvOfnkk2XEsOFKXs+/YV7rT0VYbJLRDSgE55+035zTMegc/ubsGQbj+29eCbIEwL6Odx5kFnZcNG6MKRqOxuOJn8+jM4J0UCqXjrzDDMu9pcXpswsOldkJ5h8OD+WRSwtCeRZNw7U717ewGgCWg6zPwjCGw6FEmI0x0LjiUBZh5QIsPm5zwqy3vfbaS370ox/JqFGj3DM49dRT5ZlnnpGXXnrJKUpmoQgX/B577DH58pe/7OKhtPKVX2/aQnyjCzTkHlpxbzTFj6sflD6NhZtfT0Ee4bLtHiUINiVvEK5fvrNw+MJg9TEXhtUtPz0unAa6MaGw+EY3QBgOhPMh3O57Cs0luHaNjbPvOb+ThdvH0+tvrrtOrvruVW6ZfpAqQTcRVX++iLJs6TL5xS9+Iaeccoq8970nyg9/+ENZogoTKw9La+3atXLeeZ+XkzX8T3+6Xhoa6mW3qbvJnXfeKZd9/euyQRUMChDLjGXGUmF9UMx1h3CfgGeef07++c9/OqX+5ptvyu233+YOzHDPsumQwYPl3YceJpdccqk8++yzctfdd8l3vvMd+eyn/9uFkRP5QZtSyu8LlE4tQ4gx+CX0RJkSS/+tXbdWWtoa1a2VptYGva5R1yAbWlaqdbJYEslVKoHWSjqzQWdXyuSkdy5QIJ0sNb26Z/+FcVdoe5mk2rAI2FgNqt3JOgvDcidfFRY5R3441qiD8kLtKQwrg7gInlD6XPlBWe5qDugVhezikzY/Tr7bPIC33H5CIDxhOhOiXBmkWFJccSxRhC1H7rcEwoOC+xNOOEHOPffcwEdn2rfdJnPnznUW36677uqWZCZMmCBTpkyRAw44QK6++mr5+Mc/7tLSLmBt6emAQzCT1pQqdEFJQysT2tCLcAQ8cYmDM4EfjtcTmlo+lMeV9PnLuxanN64rWP7Qz+IWqzvh4boBS0M+hJmDbtDRngm3+hBGHvCrwfKGlpZnqbA2gEIp7RRpOJ6HPXf2J54dWLF7LB0cVmBril+5L5O/3/B3+R+1gs44/QyZM+d0aW5pySkslOIcnchdqsphxIgR0p7JuuvRRx0tgwb53xRtbm6SVatXySc+8Qn59W9+Lccdd7zMPvhgufTSS+TBBx6Ur3zlIlc2ZdEjHELpC2xMh86AWjhKgxfmvjZXFfWfZMWK5fLG62/IzTffIuvXN8pzqiBRhnainXFaWVUpAwYMkMGBZUzdDT3t101BYpfxl309uO8eVq/2hFsSzWZblCXWyB571sp7TqyUAw5Oyn4HVsq0GVUyff9K2f+gKtnvgBrZZ/oAmTa9WpqbymT16g3KHJXaSPZ1lHSap2+vZugsOSWSUzA4s+riklHll0q1aJltymB+EPk0KDgfz32IVX3dSrszH8kDllDBgxI0K9EViAt+xdg9khfhuHBd7J68NcwpNPLmHT2fVlWDd+06cNUPA94Z8U7xkoZ6ANJRWG9h9c5Hvn+TzgxXyLv2rFMFMExDdKqi7VaxrGG0WZ8DIY5wadEBCUywGuOHGRF6YwUQZnEsfHMyLMrD6k2dpk2bJk8//bQbYE1NTW6GecQRR7glJYQkoH7cEx8F//jjj8sxxxwjI0eOdJYvgtbQVVssjLLNojSFGKYZ9QP4UybPlpYrftAcZUK9iGe0t3jFYOFGB8DMG5iyIP/+QFggQmurb7i8/PqH6WKrC8Y7+XFNqeGMZtAGf9pGOUZvltcIpx8IN1p0Cy2S3xskrxi/xKJed9/VJIvfIa9qzVujaHPSmdUyYFCDHH/CZKmqYgS3aXm0s0NQA+rgXhbX/Fyedk/dtZ0oQfYFX3r1FfnkJz8psw+ZLZer9VbGkmkQDxCX+/Hjxsn8BQvkCeVRFOVhhx8mE9TvgYcelE996tNy1FFHyS9+/nOpqaqWcqUJ1t/I4SOkLFku16o1OXHiRNlj9z3cfiRldPRYZ6Aw/cEab/V154hX9CRt0Ab+rmtcL/tPnyF1A+pk4cJ35LrfXaf+MTfusHZ3mzwl1+Yb/3GTPPfsc7Je0xyp7aquqfHjsdyPR2gJKN/f+2dfF3Uqc2lBQnWJkkweeWiptLYMlrKEdpjCpylGgc7omSJ0QAjCoNrhZW3S3DZfDnn3KPnkf8dk2j4ie+8tsu++3u2j97jp0/zzCy/F5Y3X1iujqPbXPFBCCOdYTJ0ymObo/WkkF/XX/tJObZaRI6pl5oHlMnRYUpYta9TGV7tw/5FVOkjJ3a4zc1XSKBz8yI84KEOntmL8+kK13if1qgOLeFqe/xeUyT8Noz68WBvLah6ap1MiSnCdn6pjr4A6aw6aPk79s77+vlyfn1M6/AZgzNJQAF2n116BdIXS5vnHmiSVXd5JEWazKa0ng5g6ak0T0Mgv5y1evFj+/e9/y8MPPyyPPvqoPPDAA05ZsJz4n//8R15//XVnWTFz82mZ7XbsaeHnma7/gUAEJnxRYlh81JOlo1WrVulMdIUcf/zxLsyUUToQlrT37bfflhkzZrhlVVNCgHvaZAKNe/MzZ/7E+eMf/+iUENYnzwt0NDITfuihh9xBgDfeeEPGjh3rwu666y7561//6mgJve+55x5Xv5122snlB4yGxWhpZdv1qaeekp+rUPzLX/7i6jB69GhXX0A77Z649kxduEIPrpaXxQGFyre0hNE22sjeFTQ12lp+5sjT0tB+eGqcCvW6ujo3Ebjjjjtcv3FlMkM+0GP+/Pnyu9/9zoVBXyY30Hbq1KmuHBx0vOmmm2T33Xd3QpayKKdbaJRMttXVK6GKENx1Z5O8s1Ct3GSN0kCj9EARolBaVcE3tTQ7JQ0vYbnhV6UTHbNwLv/GFfLkE0/KT3/yUxmvPMHJT/b0TEzbp8dQErx8fsONN0rD6tWy3377yeChQ+R0tSLHjx8nv/3Nb6W2usal57QoP6WG4p206yS5W3nqPu2bo48+RoYOHhwoCa+Q80HacmhplmueQ4mGn1HatBUCWt/aFXDvlLnGY4/z1n/f5sbiqaeeIn/729+0z2vlfSecKC06Mfjb3/8uf9CxA71OPuVkJ3tQ/GQFH1crweEF8rK8PexK2er6UBH6krpDjr+4Uad52zuo/NZdS9sCaWoVwa5YuV7kDWWqV+eJzOP6psj8RXqdK7JhHWZ7jZRrqUnVEQnNI6l8UqE6olyfcWUJLCsVPpzhyZZrnCol0CqZMVPkim+JnPVxUQGmnaHBqJlUmxJEFVeZEqNMM2S/mMk6eVXoxKJcKxpXBVker9Yyy125FVom1zItn3jUAaaIa3kxdWXK8IRZvfS/zur0WW8q9arWvGu/MxQ1jLrQZ8ovSnwcvijpuKbXeWeQD4qTuPweoL9qtH4CNcjnARV3jtmMeRFcYPz48e7+c5/7nFx55ZUufNCgQc4h8NirYI0fmLAkDmksD2AMSxjxzFl5m4qOAdEB8mbZ89JLL3UCEfxdB9r3v/99N5CsfqYUx4wZ4/YKWTYN+5NP/sBjoDIgcVggtIU4+J9//vlOeO+zj87+AiDEq6ur5Wtf+5pcfPHFTjEj9KkXg506cWjnsMMOc0rrZz/7mTz//PNOeDITpg7d0Ypw6ks9anQGjTLk9OxqFZqAulFPlIVZUdTf0gDCgSkvYDSwZxCui9Hkvvvukx/84AfO4qZdJrBQbORr+8rhfFBo11xzjTsYYpY6aZiIkB/0+sc//uH4DQsP5cfpQSZi0Gn69Oly6623OovCMHnyZFm/fr1ccskljqbUj7YX4pFi2FSuRGm9845aPdf9Vs782JnuMMivfvUrHUfnyrvf/W756S9+7uItWLjQtW+vvfdyzhCuKcrI9b/eH3zwLJl5gAo8xQ033CjnqCUJ7X75v/8rQ5RGvGqBlUl6PlvGviDKkTKf00nDvffe69LaawpGE66OH9QfaxBr0r2OoX23kQte00Bx8WWY8GlUy8uu0IGnML+w2jFz5v5aVkYGDxksewfjpKG+wR1UY5mUQzKnnXyKnKgKkvcNJ03aRScdVdKkYw3edfQIXH+jtFOjrpXc+IHEsih0iJU1yobWR+WkOXXymfP2lepYpdzz8Ivyf/97t6xeWS011VgQJK+UbHqApFrGS7p1oqRadeCr1tRx6JRHaxtLrE3aeGYnOlMpq3HlqbEnLa1rJJZ8Vs46Z185+8zB8vhTIlde9pQsf2ec1NYO1zwYfCknSKqqBuhsIqGEbNM812s+nCJUBahaLZPCsmRWzCBlJqMFqwKtqMBspxNhHK2TKkXuNTutC07nglo/GCeRqJQMlqC2CWUIWRjUTU2ap1q3Awex5MvsDiJpWiIoWtuU6VJNWhZ7HVquIyZMr/UI4pQGIqsjeTidy6TDoz2+SppTL8gpc8bIueftpiGdT41qqc4BBBZMd8stt7gTXR/60Iec5WJg5k3Yxz72MRk6dKhTCLYsCEzgwaw2OPJB/sXCegPyyi+PfkA5/fSnP3XPCFmsiqOPPtrVmQEWThMW1AYLK1ZXBDyK8/LLL3dWEUKPVzHgPdtzBF/60pecsvje977n7jk48N3vftfdc9LVgLB/4YUXnFWHoEOZmDLvavCbIoOu1IF9J2bdhx56qFMKKMh8QB8UHyjWPgBdTGEavazd8MKnP/1pd7KPY+/mXwiW9uWXX3ZfF/ngBz/o0obzB1h7hx9+uLOcn3jiCVd39nGhJxMwoysTBvr3wgsvlPe85z3Oj/I/+tGPOkuRPsmvu8GPtuBOZ5+p9DpHu4TUuVHzlQtXyqMPidTWDNexikxqV7nzuoyd8Kb85GfHi8pxHffrtT0IB98/gPYx2WFCc9lll6mMS8vBs2fJ4MFD5Nabb5ZROum655671cJdICccd5ycefbZrr9IR13ZH7S6UQ8cygnLk8Mjl2q/gn2mTZPf/vY3su/e+zglGFZIWHwoqmrlm3/ecrOc/KGT5aMf+6irE0uMYZ43cGL1G9/4pqM99KUu+XGMfliqWITQ+ZxPfCJES88rWKOktPcd7WSstakQaAMv3YfDGY0dXNFRfhjaEl/+Fjs1mquTvwlXsT3LsiG/fO4ZJNE+VTY07C6rl0yX+qWzZOU7B8qqJdNk1bLx0tpcq2nXyZhxIntNExk6UmfBicUyetwa2e+gSpl9+EDZY88aZcQ2nZXwC8QtUlFdL7tMrpJdpwxw+VdV68x7fFJ2mZKU4aNaJV6+XHaenJSDZg+WEfq8bv18GT22VY44ZqhM2aNGYokGdWqZtDdL7cC1suf0mBx8eLm6Mtl3v5gMGkrHaIugWUJn09IgI0aL7KkTmGGj1qqif0YGj1is9SuXWYcnZG+td+2ARmlNNUgiuVam7lEmh767WqbvVymV1Ru0nEYVOAxI7YhEk9YxK/vMiMue+9ZKVQ0WFMIIpx3kTEIKLsYym4hwR+UBgWEWDuC9PBjbLJyFOovl5CUz8jPOOEMnHbXOHwESdghCHAPK7vMdZeQPNED5ZnVxLeRM6INwHtzbYCEedUEhHHzwwc5v2bJlctFFFznhjRIEpKEswDW/XpRFno2Nja797DsuWrTICXNm/rQFmmBxckIVJUjZtJ10WCiACQXgPSoO8CDQmWCgBKGxWW8f/vCH5a233pLrr7/ePVMXwsMwOoQFAwrN+q2+vt6Fo4wBbWVJCgvk2muvdVeWiqEP+eNYevzDH/7gwul32kkco4mBuB0CRZxFS5yzzjrLPQPqu2TJErcMzJIvy86vvvpqbt8ZK457JlKAutoVRcYeL33GCV+WeL/yla842rMyAV0tPnx5yCGHuDrQVvzpj4985CNuiZqTwdSdPPsKYZqHYXThhXAOebCcl1UFNm7CeLnmJz9xh2KOOuYYWaZ0gXd4xQHstttUpyhI14nOgaPnyRcFufvuu0lc+wzMUuWKEgTuBfogrfWLYczoMY5m0KJpA7+o7+NwtbaQAsOBfTkUIvxN/9F3+Q7/JcE9k0lL31FzlpC9VUk5tA0lhzJnmRRL1Rx+WJeE24e38ecZJQpNWoO01DS/bf0NT+legjVazOK0MqVbPtbcUs1JyaZGS7x9vGRaB6lwYeB6l1LlkW5/R4573xB53wdEHn20Qp5+uk6Ofc8At5cIWKv/141JueFvq6WlbYV85MzdZc5/7SJqjLml110mi3zn6r2lXOl06y0if/vravnQaWNFJ1zy5+ur5eWX0jLnw3Vur/IRneX94OoNap2ukP0P2E3efTSHeERGjvRlrVsr8uSjKrD+EZOXnm9UxlNlWdckp314sBxxlMi99w2URx6pklPn7Cp77QUziQoZkbvuqJU/XLdYZ43L5JB3z5BjjvXt+8XPauS2W5fIAFUabalmVeJL5dSPTBIdEzLvdZFvXq5CVsusqlaaZXXm5/YNHZsqMQsPuk4IR+kiOizk2Ej/EK0YS5mQQ4AzYAEDCeH861//2llVvKbA8h6CB6EXtgYRoCgGwoxxGeA4hDX5c48Aw+KxOFYuwrkUWHxDblAHftQJAUh9sQxQ3CzlMuNlZs3sGAVB/U0AIUR5RvmRjykXHEKddCw7zp4921lt1JV9PSxBlMGsWbNcPqa4yMMmCwhtDuOw7McS6Zw5c5xVBMh/yJAhLh31ZTn19ttvd+9cDR7sTweGQT3zQfutLfQXsHrQH1iaWO/snWKVslz77W9/2+2L0s9YL+z5UmfuOZ3IBwZQcLQzbJmawkEossfHQSSjJenhHZZmf/nLX7oldvqZJc1vfOMbzhpn3xlakcYmIYA+s+cTTzzR0RUlyDI3ChpamKVNHYhPPv/3f//nXhcgDWAPjSVVlCFLqNTJ+MX4pC/g89J8/aM+Z90eH4Ibq4+B9tnPflZm7DtNVjc0uNOQAL60bYXKSj8hAx3c3AGUAXnO18nEj398jbMwAXuL+O2sfebqoW0Lw3iE68BBA6W5qdm/psAyqiof9gOB0YN+go6N2nf0MxYm+39+D7QzoCN5YPl5CnQoQsI4g5HU9PhhmTLpu0UFM+cJshm/dZIoS7g6uCXZtB9v4b6Bj1kpY9UNftpl4s5y6SWX6MRhN7/vqPEL7XP2JTZueY8BMTqEo44D2X3PKrWAWmS3vRtl3/2zMmV3ZYJqjoxvkLLyDVKl8kLHphx6pMiXLxyg1p7IoqUi63XSMW68yH+fK3L4EUOVMPO1A2AQHeiZNre1rbyiM2pRixEmU+XYslh4/5K+PuQIkYu+NtkpQZDSdI0b5sq79onJFy4QOU7HzuBhIkuWq8JdIlKjRuaR7xG54GKRAw6qVcW2QC29RVKp9ausEbUqRS6+dA/ZeZKmWaZlannDtazTPyJy6mk7ybp18+S5F17mDI0MHCJyjCrjQYPY76nXui2TCbu0ySHaRvj/NVWELS1Yi75ubl1dHVcO5bDA0K3Lxd/Y5Q8sp1fbleG4OB/XU1qmZ2AY0TNyzFlPzOIRglhQn//8592you2jYSGhKIgLjIkRuiz3nXfeeU6IcY/AJ/0XvvAFt+fIlbwBAs2AECQfBkp4UIQR9jdBb3XIB4KSOJyq++pXv5qL95vf/Eauu+46d2+KDhAXZ/G4Wp1QTsuXL3cTAoTvcTrLQiki1NnvYpBjDYJwHcmDZ5QB6Uw5Qw8QjgstoDfWBAqbSQUIKwuUtJuVqzN/8rByAG0gzNqFIKJf2Hfj1RKWZFHIV1xxhQu/8cYb3RIk/YKSZM+0QQX3/vvv75YlyS+8PGv0wWLDkmRvzkD9aCvH4OEbFBdH+xHI8A/lwFsIXkA9TXEDqzN7Wyg+FAbLouQHfSyuLenaoSQOdBlIhyLHCsJqgaZhOvcF/M5dB8L5L1M+uf/+B2Si8gN7XoDxgqXFoBw6bJjb/wLJpJeTCPVwjlAYqwgl+PY778hZZ5/lTn3+9+c+68Kh/TPPPO3u2atjJIR5wL+b7a8shzY1bXDGCQifZg27So03bMhQt7fIsirXGp2s5DvCBtUNUN6o9UrJ5doB8jLEVVgvXrLYvT4BP8+d+5q7zntjnpMBXOEhPrO24O0FOYfF/Ma8ebJAw95e8La8vXCh2ycERieuHTTrKLOvsEkWoX+NQmfT8aQjEN0xYz+RfadP1o5lsIsSWOTpx3SAfq9MVq1WBoi3SDamWk9Gu8IfeHSl3PDX292psKOPnSJnffxEqS2vkUNVqT3xZJnO9P4sr73VLud8ZroM2nmqMtgK+cFVt8ra+uFun1Fi6zW/Jr2pVgGWlcaWdrnhHy9J/aoqef21lVJdt1LmfOQoGTNWFZFap9f99h65956HXd2POGqGnHLqsbLTBJGTTlGGm8ue5wpJVPj84sq3DzywXOvwd2XmBjn2+D3lpA8dLsMHDpKDZovccddgefzJO+X5l2vl8FkTnMLfa+8R8sB9r0jdgHY55PCxMliVaoNm98BDT6tSHqiDe7gKG602G4gdPdtnIMscmxSxMuFdZmZm3cGcCH2sGJaeYF6W60yAIZAYTAw8Ux5ceY8PCwGEwzsGqH+2PSsEmqVHYLF0+Pvf/97dA4QfcRCwCGME9LHHHusEenjAGcgffyvP4iDkOeRzww03OKXGScV8UAawOgH8EOIIVBQhy3nnnHOOswR/8pOfyNKlS10YitCEeLheZrkguLBwgC07IcTJn7aSxtJhbXM4xF6BMDoSzn7f6aef7vah2GfEikOZkIfVmXj4YY2iSO6++25HMw6lAJYdmRxQH5YtWZZl6RRhDbD4UZzUD1A+Cg06kLfxCMIcf9oOrB6A9uL/4x//2C11kicK0JaAzVLOh9EQi9LqgxwAVm4Y0I86sYxL+0kPb2Lxonion7dw8sV138KX7ZUzh1MQ5rzvN3Kk/7jDiy++IK+p4N97n33d14tQ0qC+vsFdzUIDcAFWJadL129olC9f8GW3HHnLLbe69tx0401uifXOO+9yipZysRzZY7PRndIZP+nTOqZRgnxxplb5ygA1bIOB5Uu++nLtL691ljt1QYG5sBDdzBKz+zmnnSZnzDndPYelivEq3FihyhX5cdV3vuP8qBdyjlOkbl8TmVcAxHWyQi1I6kL/US/yxN/q3p/oIceESOBu6VBtnNaYjCwzvt/HWwt8Vo+mY3G3tTVIe4Yj/BVSFvcDo0ktrFtvelueeqRMli+cLPffvVoWLfQzGZ1IqRIdK41rx6jSUzMz65eNWpsGyqplo2TVkqnSvF41WDtLbn5pgPnKX//wpvzwqqfld796Ux5+cIFMmDjKWZxU9/VXRP719wZZumBvWTx/qvzj76/LvLleAE1Uq2/iJL700KqzKS9k1tSL3PT3N+TNV0dKw4q95eabdJbzmpqTimEjOLm2u6xfWydPPf6OrNe21Kq83/9ApUrFErUQ21S4+JdEX35BLd6FbVq7alcP7VsFA8kYI0TXzQBKhdlMmNpAZekMwcy7SHzdgtk/ygjBYzAhw5X9KYQgipPlRBwK1RxCDeFrlqClNSWEgkTgUg/zcwNCn03QWZquwEAClgd7TPbpNZYmUdgA4W1AiJsgpwzKNcuDgxm0m9OdAMsGQY31RBm0x2hng5jlRIT3a6+95ixALCyUEErG6GtpAGmAtdHqEgb+LPth9YTpYO0FtMlohcJEeXINA4uJeuMQpsTnUBFLnfTTzJkz3VIqdWJPkYkHh2E4FWugn1Ay4TZQZ2gBfVg9QAlCN5ZfyY/lUIR5PqyPAUvZ1INlRcD+qylFS2vtpX+4p8wwDWgXdOCKf7iO/QHrO/DiSy9JW3OL2/9jKRLwk0MtTc0y5/Q5Mm7MTjJS6Q94GR7QV5YHNUWJsc/2hfPPdx+o/sUvrnXf24TfsJYBP2n05ptvuf1BlhBpvdHAFEyjKtLGxg1uElSjFh4I19Xis1LBuKV/WY146smn5Entw8cf9w4FidXN9eFHHnFLs1i+wA7FkBN541xd1PHOJBZpnVqP1Vo++6dYk2Z1ctK1kMM65YoFSvqKYA/R+tEs3v5E91KmC0ASaOs+lRao7VdebpCrv/NHufDLv5L/ufjP8tWv3iPX/WaRrF/TqhpfBz1FBg3LqvIol12lqkwFcNWBkkxMlLZWH0a+yaQKyvhYqSzTGX27V4SZlBKvfKrUVkx28bOZpCoub0av0L565sk1qp73kyEDjpRYdpiMHl2nsyPfUQvYs26bIcMGvF8GVB4t7W3jZOGCxS4tS5s7jVOFGtug7fEb/bQp0T5ZKhOzpDZ5lDL8eLUKvOKsUj4bNHCA1m0nefyR1+SlF1TLKqbtr0py9ErZebIqyqlaX/W7+84XpX4lx9nrJK2msluK59SqIz9U7GDWPkU7rd4YlIYwYUDCbAhrhLgNOoQvey8wOYcqUGYAQQNscPG+4dlnn+0OgrDHhfLkEAmOgyA8c5jBlkYpizIRoOSBNUn+WAQclODkI1csOfZ8OGaNgOzqAITVxa5YLigiO2XIUpshrGwQCjlBolfS2zMHSBD6tg/Ikui73vUuZ2mxv8c+RljYko74lI3iZQLBHiPWHGA5FYQFoAHFhaJjiRGYMAdMStjLgSacqgT5ChNriLIBy7DkhXIj3zCoN2VwshRLF6uQetnyKaDdLKPS9+TBayY2ocCqw/qyA0HWDqxkFB/KFDz55JNuYsTJUmhGfe2ghdWd9kEL9qHZ72M5l9df2FslPULa4oWvKEbojqA3P3iD/Gk3EyvqFe6b/gLlsyf20osvuefZhxzirr/6za/l+j9d7w7LzDltjvObMmWqjBg1UuYrTUkTFrrc169ZI188/4typ/YHr0gcqeOQgyS8C8gqDVgwf4E89PBD7h6lQQtNetjPHr2ldGdCxmsLKGXC7GAKdMGR7+jRo9xL+Si4x5943CnEfIelG37+1DmfckrQ0Tdw0ABnHE09WLp1B16Iq3446sqhGD4Bh4MGduUADfGpF/HIz67wCK7Q3mVfo4cleOZz4DbWqg1lOUgfgpya1g2SZ58ok0fuGiSP3jtC7rsjKS8+owIgM0xNb15n0KhBNiTJZtSkT2kHqRnN5nC7O3WDmU4RzPKaNI4SPes7lLSxWJN2eLMyfKOa0H4HDWSZ8Gcqpa0lIc1NepsuU3O9NtfIlg06c2xLSZPOOFs0QkszH2P2VgKriJVsDCrc6w8K3nSIqeXWtEEVo3vJvkrr4je8qWa71qm2arSsXBqTZ59c5vzHq84+cNZoVYijNEyt0DdEXnhuldZhmNabtMY2joD+tl8Qzt9fYU3lT+dgMMBBEE42IlARJAgVFB/Cjf0+ZowcugAwN7C0WJAshfDNTz5fxj1XBCuHMzi08c1vfjO3xBoGjI4QQyG7waUDgVm9OZ4JM0urGMgHUCfyoS5YNQh8TpGiJKze5Gv3VibpcSggyqFM9gPZp8LK+V8VTChV9h0BS4jQiKU/A8/skTEZwGqBDoDDG9CUl+yxClEENpmw/S9oDX1Ywg3D6odlheDn2eqOv1mvLIdiAWKdo6w4mUpZHDgBtIVnXl8gLyYYKDcE7JFHHumW7qALoP3s8bEcTN/x9RiWdQHLspwgRkEC6xOUFsuSHIhC+X7rW99yB144sMSSNOlYege0nz5HmaL86Cv2MqkD1uNBBx3kwtnXBVihgD4BLB/DD1ieBp5ZguVgBX1NW4w2/QXbK+NAih0ye/qpp+X7P/qhXKEWLisB7L9O1LYjSg488EA5QN2T2hd2gtSWKH/xy2vlAx/4gFyrionlQ/oS5QA/P6X9hiUIkFmMqet+/3unRIwXAHEp5ylVWEOGDpET3/te588+I6ODmDY+APzO/iCHb8aqxTqaQ1ujx8gYveK4Nzd+p7HOD9qi5ApZZ45Xg7xRvHb4BsvVla2O/U/bd6Rfbf8Ra9Atz2r9iIczqbU54SVab+Bqy6BGk+uMPeiX9nRMqhPTZGDl8TIweYQMrJgt5e1jJJ7VxrKnmEGpdBzFVTtJra4qdXVamSpVSL5K0DURb3frzhwmCZaxlaAoqAp9rtC4Sc0voVfP+OQXl0Eaf6hLlyyv0sHcIC3B6szgIRpP05QnajWfYdppNTJosJqLCrp33TqWADu+XejlQ5V7LyWTTkp11UCdVfvlj4TKgTUNqlCbalRJ7yJPP94g8xe6IHn/KZNl5qxB0qZteOj+9bJ8MW0YpdastjW3Tt6fXU6+5jqgIt8xLc1D4KAw2PtiNo3QYoaOwEcIss9GOIOanytCGIWtEfLhwAgHSVhu45UBBjQOYczVXhnAUkF4G9zA0WcGBAIVejMQyN8cz4SZMCwE6ycDL11zWpHyELQIfgSjxbOlNWBlmnAwBcVrEgh7FAuCh0kCNLFXIrDyqB/LRgC68J4lr2owc2bSgOWCdcgkAxqhDFFMWEqktSU/O5DDyVSWL+kTqx/1on52j3+47uTDkiJlokTZA0RpofxRZFjXTEiwKPnKDhYXYOkSq4/ToliGTBhYAma/FkXEsjggL97PswNTXOln2o1CsrphwTERwJrEAofmv/3tb53ghG84OQodKBeghFGA8B0rDzYhYLKB4kVx0i5WCkwBWt/QRviUPU8LQ9EzGWAFwmB06mtYvrZ3xiQAN2bcWKfA+K7mBRdcKH+6/k+yz157udGH8mA585M6waDf2fMzMCFgKRNFedkVl8uZZ50pK5avcLzDPiAHTyZOmOjCvnHllfKxj37UvfZQ31Cfqwsvv9MTfGj+37f+272cPkvHLNYbccKUsDRYWISjcFnORGFyj7MX6c2Z9UY7eHmftDZmCsHCiEd5ZiGuWL1KXp37mixbsUJlYNydguVgEJagi6+Oe1zx3PsPPfzEGtVFmAZ38ZQScZns8a5qmbH/aDWN2QtT5nxyofuuaEWFqrkknzPSgso0UXyVEuUdOWjWcJk8ZaAqF5EH72uQxe80K3NVSs3A1TL73RNk5IikrF0j8gBhi5pk5JhWOWD2SBk2NK5MIHLPnQtlXUOt5teqCqlBDj9ykoxVS4zDMw/e3yhLFqmVmhwkqezbUla5WGbMnCBDBiWlolIttLkJWbR4hTS31svk3UXed9KeOjuKifKfCv4nVQCuk0MO21cm7VwpTaqvH36wXt6cx5LGMtl3vwo58f27yaABKiiW8NrFO7J6Va3OZqtlydL5Mnpctey151CpriuXATVVslLzvP6Pc2XNaqzSYSr82TQ2OgK63Fwp8PTfGJ39YrFmSWdWyB57DpCZBw7VUKwJ9lWYCPDJJG+NIdD23ntvOfPMM52QY2bOsh6fzkI4/9d//ZcTlAg1mNqEn826yQMrgGcUG1dzCC+7Epe0NhCBKcawX6EBRrxwWuJ0DDZ/UIRwLDIUAMqF1yXspWvCiE/ccB7sX2JJsGSIP0IYoYxAxyJhSRfLBrpwVB+lTFvYt0FJonTZe+SQCMuMWH9nnXWWUyT2hRTyfa/OzrEUsTCxqFieRImB//f//p/bf/3617/u8kG4WzpDuN52tfYgMPfdd1/3sjPl0hYUKpMTd/RcacdyN/2ItUh8FBmWPK9L0N9MVMgLBcWL7RYPGjAJov+tPJQQX8hB8SG86Xtem4A/mCCwFMoJYuIh9Gknio3XQywNbbT45E27+eYrvIiyhYYoTyYzOHiHfJig8G4hL+WzZI0/9eLLMvCrfXwdf0BYQSgJOQcAX/D+MxTlE2vILbZi0LmsxLlPrA2sl+NPmKITYI7v864clk6wZKf0YAn/P7ffIZ8455Pyox/8QOOeIAfOnCk11dVuKdAfEPFfcuFXIhrWNMgf//BH2f+AmTJu7FgZqHxyiLblaFXsh+tkBDdD+ahC6UP937Xb7nKY0gj/Q9XiPuzQw2Tm/vu7cNqJxVWh/MJI4pANCu2HapUOV2vPfehbjQGoYNxEH+LImzZwiMU+s8a9f9aJqDqUHldoD0/SFveyPK4EuBftNS6fgCPPB3RcfV2t5Q2q+FHwX9OJGSdhDzn0EKlVerl6Et+9xuHLyL/qXXCFH9U5I0zL6oNPrPXiW6MwGQRFyLSoYlsqu78rKdNmDNGAMvcJsqlTR8t+M+vksCPKZeZBSTn08ITMPjQuq1a3yNLlL8mMAwbLbrsPkZbmhFpM9aoI1dpQK6288m056NDBMmZ0nbDy9PD9K2TpkrTUDGiQA2cPVRO+SmctTTJk8Ggto9rNNFatflUV13gZP6FclabIE4/Uy/KlytTlahmWNcnylS9LbV1KGWyiDFQFNnBIhVTVpmTqHpXy3pOmyL778IOSogydlltvfliSFdWa396yy0S1RpSeI0fWSkV1RvaZUScnfmBn2W2KH2g3/6teHnmgXsrjk3UCoG1pVWUQWyL7HDBEaqvapVwH2V33rJV772hQi3GcWq1qOSrNOncO3RhmVcB9vgNmzdlzGJ39iilCvonK90bJokItLYQUAhSBg4DnGWGEH1f2pRBapmysbO4RsgxGwhkoDJiwMwGGIx15mPIDTpioMxQTXKQ1Z+1HIZkfeWBtcLiDvTysN3tnz0DZ1AchbGn45BeWCorCwnF8EYbDHyzxmUAGlg6gfLBEsMaYOLC3haKDXtDO9tNQCDiWPllStX1AwGsMWDjsZ6JAmFRAx54ApUefWd+hVGgLNOeZSQ7lkzd+nH7FamOZFOXIvh5xUMa0jT1b2smeLXVijxcYfVC05MeJYtrKoRbojSXJ6xkoX5Y4AX1NOuqIQ2lgGbP/iJVstGJyQDyUIf48Qy/aRJmASQ79wfIre8bUESVMHzKB4cANeVMmYcV4yUFZuD346Hb3inC1U4Q0CUWoXKvx/QvtWDgsgb817033SxIH6qQJhYcCxBpy1pMrEFpkNE1CZmjbX331FblNJxMTdXzttNMY903StIbzKTLq7ZZdNX/awVddcCkNQ9YxucCSsz1B0KATiG9960qd4L/utiX20n4jrn1VxmhBfsCVEZTnaKD+JoUom6tRj7iEc3XvElqbgry6hMZhtFAXFOxbC+bLL6/9pftZqaGqqF959VVViEvcadQBdXVOqTtLOyivMKzcvleEHZKoFLCRlvvAJh5KOL6nWT5Q6qor3bc9R40VOeBQkaNOFJl9lMjhOjGffbTILHW7TKnRmUqzzoTY+C+XWlVMlZXDtVPi0tjUKEnVorb0yGeN4vGk1NUOlqb1SXn2ab9XMW5MtXzw5HI5+zOiinaQzo5UgATLZ6Sp1npQtZTybSwzSsra95S771gtt9y62C3k6iRXvnTBMLngomEy6yCXTO68TeSG61+VdOtY7eyh2io/ADk8uuc0ka9cPF6++KWxst80/5rIXfc2ye3/fkPSKVUyShLlfZ01DpE3Xl8iL7+0SFs2QOo3iDz28Nuyfh2vHlT7AzLWjw50UNgBI2y+w6rRi97DJIVcKVDVkeNh0iAg2WPhavfM3HEMOvyIZ8rMgF94YNm1kEM4cTVFQ7pwWnPFYPEtDlfqwyA2P5ZyWdrDuuF9xjAo3xQM8UmH4kQJmWJCQbIEi3LDusMSRElyH1be3BMXhcOyKcLa3vHDioJu0AxQltE17AD7i6TDKsPqsjoaXbqD0YP86DP6iqspQUA9rW9NoaCQUMgoLZat+TUErElO+/LSP/lyyAfasMQJTVkeNzoDlCWHaJh0oMxZCqZMaGd9DaAn5fKMdY4lR7tZxiSe0Yp6kp66G42M9/ADLD9iBfKeqgELlvqy5Eu7yIe+LQXh9pQK0uAoY1V9vVtydqdjRwyXJ596Up7Q9mNBcZDFeNMpFnUoEBQYpyh/rMp7pvIX3wOlf6qYSKpiq9R0tr9mMIVKeIWGcxKTq+XPlQNrq1fXO6U8UxUty5vUgxYSx3iKe4NZewBf47p8/nN8FtxTB/LoKeWsHF7eZ/l4yOAhcsYZpzsLmWVfxqCrQ6gsFCKO2uQ7j57Wonv07BfqkfroYPb62DSNr9MqLVILLymzDx+knbpBsplGaWvd4L7XlyjXgU/tM2OlrXms3HvXa/L88/PkfR+cppbKBFm9vFxuv2WNzJ+XlbYWVWSjX1crbZjOsneVt99U5fSXhdKwcpC0xxdI3ZDX5f0f2lV2UyuneUOVrFperdbk6zoTWCHHHs/HbEfKskVl8p9bF8n8NyqksmKUmy3EyzZIW+ZNqapbKtP2r5V9pg2UncbzZYyUWqIZefHZFnnsQZ2NZHfX2dxSKa+ZJ1+86GA55oiBsnRNo/z1L3fIoEED3VfuVyxfJ6+8tFIeum+9rF+9q1SXT1XlqYylfZ2WBTJ0p6fkvAumyUHTJ8ndDzTLNVc/K2tWvEtqqnktA0Gq5HC9GdCRKzRtt27eSFt2QvFjxD49ueJi8dXS3PaifGjOTvLZz0/WXLM642rSWSkzYP+Nv+KldI/woNocsAGKAM0XduyFIcSxbHjXrtDBnDBQblhhWEcIeZQeghcLjjCWPSkDIY6isz0sYO1GSOOPoMYh9PPr1RUsHdZ0GLQvXxh1hUJxw8IvDBQFypY9SX4JAkWMEMLyY1mX/TyOzHN4hbag7BFcLDmyvOuEoDprJ1YkSg0LkHpz2AprjrJNueXXA+VH+jBNQbE6G0hHOcSDbrSDukE/8jK+ILwQbFy4vzre0pn1rn/LxJ8P6O5bo4MHt+v44bSsKqn2Ci17ndvT5HUFFAR1nziR372c6i2sAvUgjn05htClOingY9QoNqs3cew+nybhtiEHWG4Ey1etdDTgNQXbFyxGh/z8QbiMvoRbRlVQJ+7P+vjH3afn2MdkFYVleF4v+fqlX3P7grkv19AGvRaqFSE+TkZlnPZ5H35rtBeK0BeQzmAt8CmmlCqqRVrcYmX+lDZai1YLT+ftGi+Y7WcHauVGqoLky/06a002aPganS2MVEUyQsP5qaBKycbekkSF5qXpM+kBqpzGKmMNU8ZaJW3ZN1WprZK6AZjzg2TDukrNy3/rMlGOQl7rPuydaRuu1eQgTJ3mo0Ini8Wolk7rMmXm5VJdp7OwKl70zMqGxpgq1Vopi02RAbWjZN2GN6Si9mU5/6JZcuwRw2VZg8i3rrhdrdEFMmb0FGlq1FqvSWsZw6S2CgXDZ4S0IyrTsqLhbnnvKbVywcWzVNWIfP97b8lt/1wlifZpktSBCxncsovrYehYqIOKsYCHMe/G8Ol87+jddqYIDZSLwDOhzmsf7L/xegbLfHaE34Ql8c0BhCc/3Iv1ggJAEWIhmSIsBZYfwjdsfSFYTUlYeWEhY+nCcaye9txXKCbcCk0kwsBSRrmheGgbioalUMZYoTblI5w/98S1+OEw2g29LIy8w/kWKgvrySkvrRfh5EWe5EX9uALi5IPcctSNaZpAEYY/uv3YwzGVCxwKo1y+gTlPJ8xvyjU/PU6GDkGOrFN/7e/2Src0Wggm0AspQkC9WT4lDooMJYFfoTRGg2Kg/eFahJUJCtftT4boB3gO52ufVcuP1xdA+ZmEo++OO/44Z7n/7c9/kdvuuCP4gPoF8rGPnekmD4CaUT+eCtVoK1KE/CFjlkDSrlIQP61CNpVu8tVsVwJkNWI7QoIvz9ABzJr8pivKkVciMqpE46os4/FKjcMyigqiGB9gXq/MokJGn8vLqxzjaxGap4ZlWP5p1XL4mHONYwZVL9KWUktUFR6/DpGI+/VhCJFN83tdKvrhX6pGbGXoTJZ3rFi7rtMZ2iDXJFYkWtILpXLA0/Kliw+WIw8ZKavX8UsXr8sD9y6VmsrJkmqr1Jkva9C0D4bTKmsVMvK2s1gvvPQQmbV/pTz/ssh3rnhZlr0zRCrLRwd0QxGGBzx0pEZhEGbhG6P44PDprMvjiXppan2h3xRhPorXq28B7UwJotTY52L5DkGIf0/qwf4XB0LYW7I8sfRMYFNWWLkB8jchbv74sWfJlTSWFnT0dQcK5QF6UvdSkV8+ZdBW/G2iQF0KWW9hGE2sjYB09mxXmxgA/OygVDhv8gL4mX84X8AzMD/qbHW0MKN5vn8hEOJD9W/IIoyrIqQHLr5olTz6cLtUVQ7Xsii3uCKMx/g9U55ttFFf6KP5aT2KKcEwUEDUt5CyKgWkgY62QmQHWagTB2aQyV0pQrsazXpTh65AvkwWWKbl9Yh7H7jfnXjlFy8+pmOWE7Bfu+QSueCii+RrX7vUvXDPpMBAbQrVSGse9COTLHWS2sy/PmFwtSAJg71cO57ZWVw7oUYbPEyvQ5QAQ6UyOVwqK1QJVAzSWdZgnVnW6YybH9JFEbIWPkgqykfoYOSLGaq8ylRAa50JTyYHqXAaIhWVVapkUirAG50CzGRhnEqXZ0UF371TZswQzmCr0MYPUIXHgRTWx7WOZBhXgVPGkVwdlBpfVaM+V2l6zb9ihDIMH5MWVaR0XuCyNdLaXE1DpaVZrYg1fFxXLcCaMTpQhqgFqJ0BbYPeYkKf0fpNn76f7DalMnhlokGWLKTbBrg8sRoZuAEBAwQZ9AmCfILsjcG3J9hgRYAjBFjeRAkCFFhP28zJTpQgAj2cN1YQipX7QgLCT8y8UrAyecY/X+gXAuHk3d9KsBAo29pmz9ZO6gAtoCWOWTyWMrS2cGDtpr2kDV8tDJAGeuQj3O7uYHmF68gVkHfYvzewnsLC0L/BvbvkEH62shj+CHqc63u17ggrRQkC4tuSam9gdEDZkZdTwOqPH/kWQ2/p1FM4OukVhQxGjRwp5533eXeoCrAU/8Uvf8ntHfMh8tJU1cboyxctemYRGtwSqaKdjvSN5Q46u+U/9SpE83C/mzJxh0gCcIuCc9CwREIFnLTorVp57TqDDVOMtOTH8isWKLf+4sJ0HuluXT2cdeoDQxM55+Ne0Nc43rKrl0RyoYwe1yTDRijDp0bJ229VS8PKAaq4a5xCIz/lP3clTQrhkZknYye0ydjxvDDdIm/OrZD1DbuoAq1SZe3LklibloVgQFh6L80l5PDMBRREcUaG4EFOmoVZhCedNkY+94UpGspy0AYpV4sZi5CIudcZ+wCbY4A5QaOdh+Bhf4rDCghslBknB93g03pwBXbPFaGJw7Iwi4RByP4g4TjytTDLA4TviQcs3+4QTlsMpeTTWxQrnzLzwwr5GXpaR8snnC6ct/mH4xUK7yuQWy5HtSRYEYrrAGBpFFx84TJ57JG4TnR5l1PHRtxbhGMnvCU/uuY9MmyotwjjfHw4+D1C6kuNXd59XN/eAoVITXh3r6slT/ytzvm070uQr41ZE/NYreGl5bBItzpRm0I10poG/aipYmpVi07U2hNbYGnUYLV0ipAlDv8YRgdvaIWU6TopsU4gos+gUz7uniUEZqSsbeYV4h7JlPQogiDcXfDrmJ06T3cbygPt5/yUYYJHifFB8HUqMFdpzs0aUuss11isVuMygyO+3lq2ihTvXsTr1a3WTmlUJsxKVXKcph3t4vGVmrh2Gm1BCfIDvv6l+lAmJaKjPfnoUIQ0JhZShOeqImS+uK0rwjBsKbMvBnB+3TsGkEf43uLi15M25+eRX++e5NVT5JcF8uvQn+V3BatDf5dP7h0lsDrUmFOE+H/1wuXy6MOiinCkWyGK6XhNZd5URThffvgjPmC+sSI00IYtRb8wNhctewLjMzs4A5DY9pRfU6s74R0pOqC5BWk0l0ARZrJxqYhXO0X43W8/7RQhq5FWdqmKsEM19wTUJtSKMO25zz1rZWNxNmRVCXDfqXU0BkdkKusVl3d+/ZtXM7wlCLPl5R2Kb8ildWYlMyL2KClUn4M6ePOP8iibZ6zOtOpRTcuPC2dGSGXZHlKbnOG+aZrNDFblxrIPeyIoZq+crS7l5Qmd4QySZGJnjT9dapIznRL0y6GmBCmvAx3t7JnrEtpMR16apS2BCYxtvKp3VNB83G3P8u4GNgg3F8JKsKd1Jz6z1PA1jPy2EG7OkJ+mO+TnEX42v/5CfllWXv5zX8PxXzdu84MyKZtDJfyDDtSVMGjB1cPXb0vUsXfoz77sLayPqRWWoDvVyr1arOxl2vjra0r3hrV6pwhzcKzkXEdHhJxaaewh+sMz6nIVJBy/4LYQnD9/AqWVixwkID/3OTZlalV8OSawC0RWf5jex2M9E8ez3bNUGRzqCSrHL8uzC5D7Tp4+e+uJfSFuULAdZPPlahszOF+PLIpYFStpfaOD8vW+Ly2xDgSNVnDnnzzNKM4pRnftP4QFXL7rD6TTnb9g053DisQRPzcA+7F+EbZehPvcDV8dq3jls4JbauwYWgWRkzslgOx3RAeNoKXd+y/Z+L1N83PjMZRmc6NDovcWzsIq4gAXu1VLylthXANPQ366fITCPeECf7u6dPZQABsFBSQv6A9ZUHz23AHrtOApcChVLFezQHH4o4yAz89D07t/HakLub6CIxlX/+T+bg+wfb9SHYc57EALLlKA/YvO42Rrwcb1oYq2yqPzI4fcOYV+GC82FiNX3PUGGBibwm+brggpu5jLh/OnxjjvlUNX6UCn8E4PHqHbDuTHCz9355/vwsj3DxS7uZy/dWvYz8N8CrlNB+XStR2Lo94vnHu4NLvfUi7C9oqtXRl2VK9QPTv7efslwtaBvuWrTVeEWwpO4ZSA/HidFFYA+Ns9m7XW8a84wTtCu0pZzFEm8wFfdufnQvHN9Qxk6OGWp0PPHcoR2H1/OfLvyhEnQoT+hvGi8aW3/jpGq/4NDTK2QDqswzAift2yYErSuR+d7OyllATktm2i1PbmxzNahf2D53AQrhTkpynFOehNoHtzLvccXPJd6SiUivv8ARwN6Ag7HhCiYevO79t3HmHul1q2YfEYoWeIejoMBoS6Uiwzc+H4PXJdIS9uLv+SQc3Y8LCDPsD8wrBW5Ptvblg9Ihe5/nQGDsJl3JDye4R+rJg1yNUUZdhCJE7ktrRT2Kn/nLMLfdY7lRYpwjACWndnmZlz0Jt8y64k1xXy4roh2V0ag1YG5cdnnDohxzyWEVfv58+NWHh/OOpSyBEWNDLCdolSDiXZ6d3+d5RlpxODeikLsgTKzxLlgzTu6u7NQgzS5fi2gEMg5LtC8SJXggN2Bd6fk/3uKQhyh2Wy2o9pL8+s70pF716o31FQCi03B/Woh5bDpXCVghDqohc+Tr52w5Ny6hlj5fNf2EtVTr20ttRLZWW1Mk65G5ccXSaBZ5gtxQJBvdVxqMK93+Vm5xG2F3QWSP5+cx+goTS/h8QfhKj/LnJMdtL5WFwuuXihPPxgVioqJvoX6uO8rD1fJk5aIJdeNlsm7VwuLZnljj/59QmfY2E+Dbc2H04Zh+4N3IWft74DRlsa0IMe4/1PblP6lNEe4PvT5VKVGCX33iVy9VXPy5o1E6WmaqDSkIigNHkSWYRdAWJ257YoqAAdjQtXxr8fmUxWuQ7mR4KTSVWAeo8C5KsajDs/9rZkI4yIWLH+tX+ukdt+HKLf9uTsyjeK/Y9Em+M52Q/Ofw+ZH27V0ZBz5VKpNSnXUcLPbcF+/KB4tZTrvTPedDzxDeO02gi1dXxJhvfeNG28QuPzAwE4Td9DF4/znVqtT9zXyxxfzoppzfjqE9dw2I7twvyR8P2o/Vrm+k5pqH+TwY/wMn/mhxqqKiv8AageTiYii3BbABpCe4mL01050HXWfRriPhCgyqR8vaxtfE4twvFy3vkTnFr032xlRsWACzJ04No51y0Dq4PVK8K2h858FP4ItRdMhOvMPnQU068ABP496nrLrzhye3/ury/DpUu0aN3UAiwbIC2NIldevkqefoyf1RohqTRfKW6RdGyh7Dp5lVzxjYNl5Gg1HDOtqrD4HVY+wEGO5N0ZrgRrQ7hq6ucnn96B4OLAbcdePnQLbnZweH7gDw7+4MPm7lbp2SaZdr4KViGVOrHgx9V/cs3rsnbtSKmsGCgZ/6tcio37qRAiRbgtgEGivcQlNF5CCLjDfUFHmaSsWVpSC2TS5FbZZ3qVDu6Vkko1u5koA9ltW7iYeg2PyC0ENRxcPaIloW0VAf85HuTZ8xTfGN4I8F5cLcOCfBfk0S3CfFI8vssNvnL/DHofa9VB0i7ZdK2OhTHyxMPrZNmiOikvG64J4qoEmyUdXyHDhtXL9GnVUlPTpP7qdCLpP+CvyGm8Dti4shCWYy1aV60iDOsZZe3qGo0Dhw46cGUSkdSL/9xlLK6aLt4ibXx3ODFOlr5TIU89uU5am0dJVdUQZyF6lEbLSBFuCwhGF5fCA8p8/ZWfr5LYemluWSyNGxbp7CnrhI/7dqsOZixCPkG31cBJC6tP4RZG2AbQ6XizFythZWiTnbAS7KwQWTb1k7muQd64cHkehX4KySmXToorrdzGj9ey3DlALcPRkpDhqhtZpmyXTCIl2YQqS1knqdbVks3wMf2WQDBTv85lGsKK0O9J6pX2WtFB3TZSdBqZpT/nq+ncJxp3dCgdOlYOuDJJ4Cf2/KoXh+2yopMTfmovUSMVyWFSwW+/tg/UHkpq31q80hApwm0BwejiEoyvPOQLj5SbMSFj0syYyvkNyIrgG5uerTYajFsUKEHqU7yFEbYV0H+Ow9xTGF39Xp9XkFw3fYJmCtftUTpLS/NVbcR3j13tYnxSzf+wcCrV7n5iLc4YyvLt2qbg08T++8POUmOdzf1mIeiKPwnbONyUvfu2ZkCCTtayFugtwuBxqxqbvUd4klNqm1zf5ZHQ8vGHZTpknetD7ct0WpWi0rCivJJIKvP8DzyEy+8OkSLcFkB/ai9xKdy1yhwa3jELVcbQbuVXM/DnF/rtJ8DgRzqcXmfyXTqrRIjQe4RlUlgmeoHl/Xogt4rC8gnnR3GhInM8jx9GBwdmnF9WrcRYq6TSJK7SQeOXQU0PuvwscSGECwnB2mvJC7Uz7Bemz7aM3rSJNC5qh76ThMmuwIXBfIIpCv5lxHORdAqj90755icogkgRbguAobSXuIR4KwTPKY4H3J3G41c0dJT7VxICTwW3hQbiFkW4PqG6RthG0Q1/bY5VeXjeCVW9hvkf4J9zOnRYiuQeQZrN8PNAKEisyTKJBStshbY7e4x83g7lSfmG/PruSGBBwCuxDj5hEs99oX50Vy/+FCTAjoe0flVgI/OyCCJFuC2AvtReKt6lvuutIx2DqMMyZM8DhnBLDurNG1LcF89rSyBcm4gdt310zV3F96f7iivhIfJCQnLFhflKn/XRC1C2C/yyp1ueVMEZUyXoZKj+iyVI6wVsR169R7gWfp20k08EhVE4n086llfpuOAXZNQLRdnuTpAS7mUbJ+RdTpEi3NHgu78ztGsZbEEPwxNRZ0fYcVBMCJo/o8GPCD96uGeQYE34EGedBHE8iuXZG4TzjdAdClMeX6Ojv4ZMAvUqrb/cnCjCNgL6tKij8wsMrAJeESLsGLAxke+wAHHe4ugYPnrHlWe1NlgOjbGa4r0ChPPZVBehp6CfUHR8Wca7tH/Gn+VsdcToKSKLcLtDmAnyurZjnEeIECGAGzEbDQx8A89o3GwVyPWTu8lDuIPC4SV2XKQItzf0ggkiRIiQB8ZRNH52GERLo9sbGLzmIkSI0DtE42eHQqQII0SIECHCDo1IEUaIECFChB0akSKMECFChAg7NCJFGCFChAgRdmhEijBChAgRIuzAEPn/GSNAzKXOnIQAAAAASUVORK5CYII="}}},{"cell_type":"code","source":"class Node:\n    def __init__(self, feature=None, threshold=None, left=None, right=None,*,value=None):\n        self.feature = feature\n        self.threshold = threshold\n        self.left = left\n        self.right = right\n        self.value = value\n        \n    def is_leaf_node(self):\n        return self.value is not None\n\n\nclass DecisionTreeClassifier:\n    def __init__(self, min_samples_split=2, max_depth=100, n_features=None):\n        self.min_samples_split=min_samples_split\n        self.max_depth=max_depth\n        self.n_features=n_features\n        self.root=None\n\n    def fit(self, X, y):\n        self.n_features = X.shape[1] if not self.n_features else min(X.shape[1],self.n_features)\n        self.root = self._grow_tree(X, y)\n\n    def _grow_tree(self, X, y, depth=0):\n        n_samples, n_feats = X.shape\n        n_labels = len(np.unique(y))\n\n        # check the stopping criteria\n        if (depth>=self.max_depth or n_labels==1 or n_samples<self.min_samples_split):\n            leaf_value = self._most_common_label(y)\n            return Node(value=leaf_value)\n\n        feat_idxs = np.random.choice(n_feats, self.n_features, replace=False)\n\n        # find the best split\n        best_feature, best_thresh = self._best_split(X, y, feat_idxs)\n\n        # create child nodes\n        left_idxs, right_idxs = self._split(X[:, best_feature], best_thresh)\n        left = self._grow_tree(X[left_idxs, :], y[left_idxs], depth+1)\n        right = self._grow_tree(X[right_idxs, :], y[right_idxs], depth+1)\n        return Node(best_feature, best_thresh, left, right)\n\n\n    def _best_split(self, X, y, feat_idxs):\n        best_gain = -1\n        split_idx, split_threshold = None, None\n\n        for feat_idx in feat_idxs:\n            X_column = X[:, feat_idx]\n            thresholds = np.unique(X_column)\n\n            for thr in thresholds:\n                # calculate the information gain\n                gain = self._information_gain(y, X_column, thr)\n\n                if gain > best_gain:\n                    best_gain = gain\n                    split_idx = feat_idx\n                    split_threshold = thr\n\n        return split_idx, split_threshold\n\n\n    def _information_gain(self, y, X_column, threshold):\n        # parent entropy\n        parent_entropy = self._entropy(y)\n\n        # create children\n        left_idxs, right_idxs = self._split(X_column, threshold)\n\n        if len(left_idxs) == 0 or len(right_idxs) == 0:\n            return 0\n        \n        # calculate the weighted avg. entropy of children\n        n = len(y)\n        n_l, n_r = len(left_idxs), len(right_idxs)\n        e_l, e_r = self._entropy(y[left_idxs]), self._entropy(y[right_idxs])\n        child_entropy = (n_l/n) * e_l + (n_r/n) * e_r\n\n        # calculate the IG\n        information_gain = parent_entropy - child_entropy\n        return information_gain\n\n    def _split(self, X_column, split_thresh):\n        left_idxs = np.argwhere(X_column <= split_thresh).flatten()\n        right_idxs = np.argwhere(X_column > split_thresh).flatten()\n        return left_idxs, right_idxs\n\n    def _entropy(self, y):\n        hist = np.bincount(y)\n        ps = hist / len(y)\n        return -np.sum([p * np.log(p) for p in ps if p>0])\n\n\n    def _most_common_label(self, y):\n        counter = Counter(y)\n        value = counter.most_common(1)[0][0]\n        return value\n\n    def predict(self, X):\n        return np.array([self._traverse_tree(x, self.root) for x in X])\n\n    def _traverse_tree(self, x, node):\n        if node.is_leaf_node():\n            return node.value\n\n        if x[node.feature] <= node.threshold:\n            return self._traverse_tree(x, node.left)\n        return self._traverse_tree(x, node.right)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:18:32.819235Z","iopub.execute_input":"2024-04-30T20:18:32.819662Z","iopub.status.idle":"2024-04-30T20:18:32.848478Z","shell.execute_reply.started":"2024-04-30T20:18:32.819629Z","shell.execute_reply":"2024-04-30T20:18:32.847005Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# üìù Importing Data","metadata":{}},{"cell_type":"code","source":"df = load_iris()     \nx,y=df.data,df.target","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:19:04.941404Z","iopub.execute_input":"2024-04-30T20:19:04.94191Z","iopub.status.idle":"2024-04-30T20:19:04.950434Z","shell.execute_reply.started":"2024-04-30T20:19:04.941859Z","shell.execute_reply":"2024-04-30T20:19:04.948833Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=1234)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:19:05.153551Z","iopub.execute_input":"2024-04-30T20:19:05.153954Z","iopub.status.idle":"2024-04-30T20:19:05.159898Z","shell.execute_reply.started":"2024-04-30T20:19:05.153923Z","shell.execute_reply":"2024-04-30T20:19:05.158749Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# üî¨ Applying Decision Tree Classification on Dataset","metadata":{}},{"cell_type":"code","source":"dtc=DecisionTreeClassifier()\ndtc.fit(x_train,y_train)","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-04-30T20:19:05.664117Z","iopub.execute_input":"2024-04-30T20:19:05.664558Z","iopub.status.idle":"2024-04-30T20:19:05.715503Z","shell.execute_reply.started":"2024-04-30T20:19:05.664526Z","shell.execute_reply":"2024-04-30T20:19:05.714243Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred=dtc.predict(x_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:19:06.167127Z","iopub.execute_input":"2024-04-30T20:19:06.167589Z","iopub.status.idle":"2024-04-30T20:19:06.172963Z","shell.execute_reply.started":"2024-04-30T20:19:06.167553Z","shell.execute_reply":"2024-04-30T20:19:06.171651Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:19:10.834582Z","iopub.execute_input":"2024-04-30T20:19:10.835021Z","iopub.status.idle":"2024-04-30T20:19:10.840075Z","shell.execute_reply.started":"2024-04-30T20:19:10.834987Z","shell.execute_reply":"2024-04-30T20:19:10.839206Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<h1 style=\"border:orange; border-width:3px; border-style:solid;padding:20px;text-align:center;border-radius:50px\"> üå≤üå≤ Random Forest Classification üå≤üå≤</h1>  ","metadata":{}},{"cell_type":"code","source":"class RandomForestClassifier:\n    \n    def __init__(self,n_trees=10,max_depth=10,min_samples_split=2,n_features=None):\n        self.n_trees=n_trees\n        self.max_depth=max_depth\n        self.min_samples_split=min_samples_split\n        self.n_features=n_features\n        self.trees=[]\n        \n    def fit(self,x,y):\n        self.trees=[]\n        for _ in range(self.n_trees):\n            tree=DecisionTreeClassifier(max_depth=self.max_depth,min_samples_split=self.min_samples_split,n_features=self.n_features)\n            x_sample,y_sample=self._bootstrap_samples(x,y)\n            tree.fit(x_sample,y_sample)\n            self.trees.append(tree)\n            \n            \n    def _bootstrap_samples(self,x,y):\n        n_samples=x.shape[0]\n        idxs=np.random.choice(n_samples,n_samples,replace=True)\n        return x[idxs],y[idxs]\n    \n    def _most_common_label(self, y):\n        counter = Counter(y)\n        value = counter.most_common(1)[0][0]\n        return value\n    \n    def predict(self,x_test):\n        preds=np.array([tree.predict(x_test) for tree in self.trees])\n        tree_preds=np.swapaxes(preds,0,1)\n        \n        return np.array([self._most_common_label(pred) for pred in tree_preds])\n        ","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:53:40.499505Z","iopub.execute_input":"2024-04-30T20:53:40.500082Z","iopub.status.idle":"2024-04-30T20:53:40.51436Z","shell.execute_reply.started":"2024-04-30T20:53:40.500038Z","shell.execute_reply":"2024-04-30T20:53:40.512798Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# üìù Importing Data","metadata":{}},{"cell_type":"code","source":"df = load_iris()     \nx,y=df.data,df.target","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:53:40.966853Z","iopub.execute_input":"2024-04-30T20:53:40.968234Z","iopub.status.idle":"2024-04-30T20:53:40.977664Z","shell.execute_reply.started":"2024-04-30T20:53:40.968167Z","shell.execute_reply":"2024-04-30T20:53:40.976215Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=1234)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:53:41.232398Z","iopub.execute_input":"2024-04-30T20:53:41.233344Z","iopub.status.idle":"2024-04-30T20:53:41.239555Z","shell.execute_reply.started":"2024-04-30T20:53:41.233301Z","shell.execute_reply":"2024-04-30T20:53:41.238424Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# üî¨ Applying Random Forest Classification on Dataset","metadata":{}},{"cell_type":"code","source":"rfc=RandomForestClassifier()\nrfc.fit(x_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:53:42.140687Z","iopub.execute_input":"2024-04-30T20:53:42.142075Z","iopub.status.idle":"2024-04-30T20:53:42.44557Z","shell.execute_reply.started":"2024-04-30T20:53:42.142012Z","shell.execute_reply":"2024-04-30T20:53:42.444515Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred=dtc.predict(x_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:53:47.379625Z","iopub.execute_input":"2024-04-30T20:53:47.380135Z","iopub.status.idle":"2024-04-30T20:53:47.387028Z","shell.execute_reply.started":"2024-04-30T20:53:47.380095Z","shell.execute_reply":"2024-04-30T20:53:47.385302Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:53:51.019364Z","iopub.execute_input":"2024-04-30T20:53:51.019912Z","iopub.status.idle":"2024-04-30T20:53:51.027698Z","shell.execute_reply.started":"2024-04-30T20:53:51.019845Z","shell.execute_reply":"2024-04-30T20:53:51.026319Z"},"trusted":true},"execution_count":null,"outputs":[]}]}